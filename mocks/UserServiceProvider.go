// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	users "github.com/sainak/bitsb/users"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceProvider is an autogenerated mock type for the UserServiceProvider type
type UserServiceProvider struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserServiceProvider) GetByID(ctx context.Context, id int64) (users.User, error) {
	ret := _m.Called(ctx, id)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) users.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, creds
func (_m *UserServiceProvider) Login(ctx context.Context, creds *users.UserLoginForm) (users.Token, error) {
	ret := _m.Called(ctx, creds)

	var r0 users.Token
	if rf, ok := ret.Get(0).(func(context.Context, *users.UserLoginForm) users.Token); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Get(0).(users.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *users.UserLoginForm) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: token
func (_m *UserServiceProvider) RefreshToken(token string) (users.Token, error) {
	ret := _m.Called(token)

	var r0 users.Token
	if rf, ok := ret.Get(0).(func(string) users.Token); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(users.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: ctx, user
func (_m *UserServiceProvider) Signup(ctx context.Context, user *users.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserServiceProvider) Update(ctx context.Context, user *users.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserServiceProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceProvider creates a new instance of UserServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceProvider(t mockConstructorTestingTNewUserServiceProvider) *UserServiceProvider {
	mock := &UserServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

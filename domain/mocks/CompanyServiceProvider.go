// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/sainak/bitsb/domain"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/sainak/bitsb/utils/repo"
)

// CompanyServiceProvider is an autogenerated mock type for the CompanyServiceProvider type
type CompanyServiceProvider struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, company
func (_m *CompanyServiceProvider) Create(ctx context.Context, company *domain.Company) error {
	ret := _m.Called(ctx, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CompanyServiceProvider) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CompanyServiceProvider) GetByID(ctx context.Context, id int64) (*domain.Company, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Company
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Company); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx, cursor, limit, filters
func (_m *CompanyServiceProvider) ListAll(ctx context.Context, cursor string, limit int64, filters repo.Filters) ([]*domain.Company, string, error) {
	ret := _m.Called(ctx, cursor, limit, filters)

	var r0 []*domain.Company
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, repo.Filters) []*domain.Company); ok {
		r0 = rf(ctx, cursor, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Company)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, repo.Filters) string); ok {
		r1 = rf(ctx, cursor, limit, filters)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int64, repo.Filters) error); ok {
		r2 = rf(ctx, cursor, limit, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, company
func (_m *CompanyServiceProvider) Update(ctx context.Context, company *domain.Company) error {
	ret := _m.Called(ctx, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCompanyServiceProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyServiceProvider creates a new instance of CompanyServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyServiceProvider(t mockConstructorTestingTNewCompanyServiceProvider) *CompanyServiceProvider {
	mock := &CompanyServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

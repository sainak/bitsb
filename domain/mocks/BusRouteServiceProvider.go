// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/sainak/bitsb/domain"
	mock "github.com/stretchr/testify/mock"
)

// BusRouteServiceProvider is an autogenerated mock type for the BusRouteServiceProvider type
type BusRouteServiceProvider struct {
	mock.Mock
}

// CalculateTicketPrice provides a mock function with given fields: ctx, id, start, end
func (_m *BusRouteServiceProvider) CalculateTicketPrice(ctx context.Context, id int64, start int64, end int64) (int64, error) {
	ret := _m.Called(ctx, id, start, end)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) int64); ok {
		r0 = rf(ctx, id, start, end)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, id, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, busRoute
func (_m *BusRouteServiceProvider) Create(ctx context.Context, busRoute *domain.BusRoute) error {
	ret := _m.Called(ctx, busRoute)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BusRoute) error); ok {
		r0 = rf(ctx, busRoute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BusRouteServiceProvider) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *BusRouteServiceProvider) GetByID(ctx context.Context, id int64) (*domain.BusRoute, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.BusRoute
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.BusRoute); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BusRoute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx, cursor, limit, locations
func (_m *BusRouteServiceProvider) ListAll(ctx context.Context, cursor string, limit int64, locations []int64) ([]*domain.BusRoute, string, error) {
	ret := _m.Called(ctx, cursor, limit, locations)

	var r0 []*domain.BusRoute
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, []int64) []*domain.BusRoute); ok {
		r0 = rf(ctx, cursor, limit, locations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.BusRoute)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, []int64) string); ok {
		r1 = rf(ctx, cursor, limit, locations)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int64, []int64) error); ok {
		r2 = rf(ctx, cursor, limit, locations)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, busRoute
func (_m *BusRouteServiceProvider) Update(ctx context.Context, busRoute *domain.BusRoute) error {
	ret := _m.Called(ctx, busRoute)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BusRoute) error); ok {
		r0 = rf(ctx, busRoute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBusRouteServiceProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewBusRouteServiceProvider creates a new instance of BusRouteServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBusRouteServiceProvider(t mockConstructorTestingTNewBusRouteServiceProvider) *BusRouteServiceProvider {
	mock := &BusRouteServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
